;;; Test Cases for the Scheme Project 

;; To run all tests:
;;     python3 scheme_test.py tests.scm
;;

;; In the following sections, you should provide test cases, so that by 
;; running 
;;     python3 scheme_test.py tests.scm
;; you can test the portions of the project you've completed.  In fact, 
;; you might consider writing these tests BEFORE tackling the associated
;; problem!


;; -- BEGIN TEST -- ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The following should work for the initial files. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

3
; expect 3

-123
; expect -123

1.25
; expect 1.25

#t
; expect #t

#f
; expect #f

)
; expect Error


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem 1  (the reader) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;   Initially, the project skeleton simply reads and prints the expressions
;   entered.  Later on, it starts evaluating them.  You may therefore need
;   to modify the tests you initially provide for this section when you get
;   to later sections.  For example, initially, entering the symbol x will
;   simply cause the evaluator to print "x" rather than attempting to evaluate
;   it (and getting an error).  Therefore, you may later have to modify
;   x to (e.g.) 'x

(car '(3 4))
; expect 3

(cdr '(3 4))
; expect (4)

(car (car '((3 . 4) (5 . 6))))
; expect 3

(car (car (cdr '((3 . 4) (5 . 6)))))
; expect 5

'(3 4 . 5)
; expect (3 4 . 5)

'(3 . 4 5)
; expect Error

'()
; expect ()

'(.)
; expect Error

;; Must match weird STk output
'( . 4)
; expect 4

'(2 968 52 58 -12 . 2 . 23 2 . 23)
; expect Error

'(2 3 . 2 3)
; expect Error

'(#t . #f)
; expect (#t . #f)

'(#t #f #t #f)
; expect (#t #f #t #f)

'(#t . #f . 'a)
; expect Error

'a
; expect a

'#t
; expect #t

;; STk returns ((quote b) 3 2 (quote c) (quote a)) just like our program
;; '('b 3 2 'c 'a)
;;; expect ('b 3 2 'c 'a)

(3 2)
; expect Error


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem A2 and B2 (symbol evaluation and simple defines) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define a 2)
a
; expect 2

(define b a)
b
; expect 2

a
; expect 2

'a
; expect a

'b
; expect b

(define $ 3)
$
; expect 3

(define $ a b)
; expect Error

(define $ a)
$
; expect 2

(define %*%@ 42)
%*%@
; expect 42

(define foo 'bar)
foo
; expect bar

;; Note that it truncates due to not being long form
(define pi 3.14159265358979323846264338327950288479716939937510)
pi
; expect 3.141592653589793


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem 3 (primitive function calls) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(+ (* 2 2) (/ 2 1))
; expect 6.0

;; Custom zero-division error
(/ 1 0)
; expect Error

(/ 5 10 3)
; expect Error

(cdr '(3 4 5))
; expect (4 5)

(car '())
; expect Error

(quotient 2)
; expect Error

(quotient 2 0)
; expect Error

(quotient 2 3)
; expect 0

(+ 3.2 4.1 2.8 0.8)
; expect 10.9

(not 3)
; expect #f

(list? '(3 4 2))
; expect #t

(symbol? 'a)
; expect #t

(integer? 3)
; expect #t

(integer? 3.05)
; expect #f

(> 3 2)
; expect #t


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem A4, B4, A5, B5, and 6 (calls on user-defined functions) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ----- A4 ----- ;;
;; -------------- ;;

(lambda (x) (set! y x) (+ x y))
; expect <(lambda (x) (begin (set! y x) (+ x y))), <Global frame at 0x848444c>>

(lambda (x y) (/ x y))
; expect <(lambda (x y) (/ x y)), <Global frame at 0x848444c>>

(lambda (x))
; expect Error

(lambda (x) ())
; expect <(lambda (x) ()), <Global frame at 0x848444c>>

(lambda (0) (1))
; expect Error

(lambda (anything) (something))
; expect <(lambda (anything) (something)), <Global frame at 0x848444c>>

(lambda (x) (lambda (y) (+ y x)) x)
; expect <(lambda (x) (begin (lambda (y) (+ y x)) x)), <Global frame at 0x848444c>>

(lambda (+ x 1))
; expect Error

;; Our interpreter does not allow confusing non-distinct formal paramters
(lambda (x x) (+ x 3))
; expect Error

(lambda (x . T) (+ x T))
; expect <(lambda (x . t) (+ x t)), <Global frame at 0x848444c>>

;; ----- B4 ----- ;;
;; -------------- ;;

(define function a (+ a 1))
; expect Error

(define (func (x y) z) (+ x 1))
; expect Error

(define func (lambda (x) ()))
func
; expect <(lambda (x) ()), <Global frame at 0x848444c>>

(define fun2
  (lambda (x)
    (lambda (y)
      (+ y x))
    x))
fun2
; expect <(lambda (x) (begin (lambda (y) (+ y x)) x)), <Global frame at 0x848444c>>

(define (func x) ())
func
; expect <(lambda (x) ()), <Global frame at 0x848444c>>

(define (hello person) (display person) (newline))
hello
; expect <(lambda (person) (begin (display person) (newline))), <Global frame at 0x848444c>>

(define (variable-arguments x . T)
  (display x)
  (newline)
  (display T)
  (newline))
variable-arguments
; expect <(lambda (x . t) (begin (display x) (newline) (display t) (newline))), <Global frame at 0x848444c>>


;; ----- A5/B5/6 ----- ;;
;; ------------------- ;;

(define (test2)
  (define (helper x)
    (+ x (* x x) (- 10 x)))
  helper)
((test2) 100)
; expect 10010

(test2 100)
; expect Error

(define (test1 x)
  (define y x)
  (+ x y))
(test1 3)
; expect 6

(test1 -99)
; expect -198

(define func (lambda (x) (* x x)))
(func 10)
; expect 100

((lambda (x) 1) 2)
; expect 1

(define func1 (lambda x (+ x 1)))
(func1 2)
; expect Error

(define (add_one x) (+ x 1))
(add_one 10)
; expect 11

(define (add_squares a b) (+ (* a a) (* b b)))
(add_squares 6 8)
; expect 100

(add_squares 5)
; expect Error

(define (f x . T)
  (begin (+ x 3) (* (car T) 2)))
(f 3 5)
; expect 10

(define (g x y . z)
  (display x)
  (newline)
  (display z)
  (newline))
(g 3 2 1 0 8)
; expect 3
; expect (1 0 8)

(g '(2 3) 3 '(3 . 2))
; expect (2 3)
; expect ((3 . 2))

(f 3 5 8 6 9)
; expect 10

(define (concatenationnn a b c d)
  (begin
    (display a)
    (display b)
    (display c)
    (display d)
    (newline)))
(concatenationnn 1 'xye 7 'awer)
; expect 1xye7awer

(concatenationnn 'w 't 'f '| this is a string|)
; expect wtf this is a string


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;
;; Problem 7 (set!) ;;
;;;;;;;;;;;;;;;;;;;;;;

(define x 4)
(set! x 5)
x
; expect 5

(define (test7 n) (set! x n))
(test7 10)
x
; expect 10

(define a 99)
(test7 a)
x
; expect 99

(define (change-fail x) (set! x 10))
(change-fail x)
x
; expect 99

(test7 'awerup)
x
; expect awerup


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem A8 (if, and) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

(if #t 3 4)
; expect 3

(if #f 4 5)
; expect 5

(if (> 3 5) 10 100)
; expect 100

(if #f 0)

(if 3 (+ 10 5))
; expect 15

(if #f (+ 12 10) (/ 3 0))
; expect Error

(if 'mymom #t #f)
; expect #t

(if (and 'myDad 'yourMom) 'damn)
; expect damn

(and 1 2 3)
; expect 3

(and 2 5 #f)
; expect #f

(and #f notadefinedfunction)
; expect #f

(and)
; expect #t

(and (and (and (and 2 7 'a 'hehh 'huehuehue) 3 2 (and 'at23t 2) (and) #f (and 2 79 -9 0 0 0 20 0))) 'hi)
; expect #f

(and #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t)
; expect #t

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem B8 (cond, or) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(or 1 2 3)
; expect 1

(or 2 5 #f)
; expect 2

(or #f notadefinedfunction)
; expect Error

(or)
; expect #f

(or (or (or (or 2 7 'a 'hehh 'huehuehue) 3 2 (or 'at23t 2) (or) #f (or 2 79 -9 0 0 0 20 0))) 'hi)
; expect 2

(or #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)
; expect #f

(cond ((> 3 2) 'greater)
      ((< 3 2) 'less))
; expect greater

(cond ((> 3 3) 'greater)
      ((< 3 3) 'less)
      (else 'equal))
; expect equal

(cond ((if (< -2 -3) #f -3) => abs)
      (else #f))
; expect 3

(cond (90 => (lambda (x) (/ x 3)))
      (else notgonnahappen))
; expect 30.0

(cond (else 3))
; expect 3

(define (append-to-z a)
  (cond (a => (lambda (x) (cons 'z x)))
	(else notgonnahappeneither)))
(append-to-z 'a)
; expect (z . a)
(append-to-z 5)
; expect (z . 5)

(define (have_money? x)
  (define (helper x n)
    (cond ((= x 100) #t)
	  ((= x 0) #f)
	  (else (+ x n))))
  (helper x 99))
(have_money? 100)
; expect #t

(have_money? 1)
; expect 100

(cond ((if #t 10 3) => (lambda (x) (if (= x 10) #f #t)))
      (else 100))
; expect #f

(cond ((if #t #f what?) => some)
      (else 'testpassed))
; expect testpassed

(cond (else 20 30 0))
; expect 0

(cond ((= 2 3) 10 100 huh?)
      (else 1 20 oops))
; expect Error

(cond ((= 2 3) 10 25)
      ((< 10 2) 100 50))

(cond (#t))
; expect #t

(cond (100))
; expect 100

(cond ((and #f Too) Many)
      ((or #t Tests!) 'Done)
      (else notgettinghere))
; expect done

(cond (#f 10)
      (else => (lambda (x) x)))
; expect #t


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;
;; Problem 9 (let) ;;
;;;;;;;;;;;;;;;;;;;;;

(define x 3) (define y 4) (define z 5) (define r 0)
(let ((x y) (y z) (z r)) (list x y z))
; expect (4 5 0)

(let ((x (* y r)) (y z) (z (+ x 10))) (list x y z))
; expect (0 5 13)

(let ((x y z)) (list x y z))
; expect Error

(let ((x 10) (y (+ x y)) (z z)) (list x y z))
; expect (10 7 5)

(let () (list x y z))
; expect (3 4 5)

(let ((x)) (list x))
; expect Error

(let (x 100) x)
; expect Error

(let (x 0) ((+ x 1)))
; expect Error

(let ((x y) (y z) (z oops)) (list x y z))
; expect Error

(let () oops (list x y z))
; expect Error


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Extra Credit 1 (let*) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define x 3) (define y 4) (define z 5) (define r 0)
(let* ((x y) (y (* x r)) (z x)) (set! x 1000) (list x y z))
; expect (1000 0 4)

(let* ((x y) (y z) (z r)) (list x y z))
; expect (4 5 0)

(let* ((x (* y r)) (y z) (z (+ x 10))) (list x y z))
; expect (0 5 10)

(let* ((x y z)) (list x y z))
; expect Error

(let* ((x 10) (y (+ x y)) (z z)) (list x y z))
; expect (10 14 5)

(let* () (list x y z))
; expect (3 4 5)

(let* ((x)) (list x))
; expect Error

(let* (x 100) x)
; expect Error

(let* (x 0) ((+ x 1)))
; expect Error

(let* ((x y) (y z) (z oops)) (list x y z))
; expect Error

(let* () oops (list x y z))
; expect Error

(let* ((x 0) (y x) (z y))
  (+ x y z))
; expect 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Extra Credit 2 (case) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(case (* 2 3)
  ((2 3 5 7) 'prime)
  ((1 4 6 8 9) 'composite))
; expect composite

(case (car '(c d))
  ((a e i o u) 'vowel)
  ((w y) 'semivowel)
  (else 'consonant))
; expect consonant

(define x 3) (define y 10)
(case (car '(+ * /))
  ((+ add) (+ x y))
  ((* mult) (* x y))
  ((/ div) (/ x y)))
; expect 13

(case (#t)
  (#f 'false)
  (#t 'true))
; expect Error

(case (= 3 3)
  (#f 'false)
  (#t 'true))
; expect true

(case (or (< 2 3) huh?)
  (((= 3 3) (> 2 4)) 'infirst)
  ((#t #t #f) 'inlast))
; expect inlast

(case (= (+ 1 1) 2)
  (((= 3 4) (< 2 6) anycrap) shouldnotgethere)
  ((#t #f) 'right))
; expect right

(case (/ 2 0)
  ((Error!) '?))
; expect Error

(case (+ 2 3)
  (5 'first)
  ((5) 'last))
; expect first

(case (+ 2 3)
  (5))
; expect #t

(case 0
  ('here)
  ('there))

(case 60
  ((60 60 60) 'triangle)
  (else 'uhmm?))
; expect triangle

(case 60
  ((60 stuff otherstuff) 'triangle)
  (else 'uhmm?))
; expect triangle

(case awrpoanuweproabni
  (not getting here at all))
; expect Error

(case #t
  (5))

(case 355
  (else 2)
  ((3 2 5) 'foo))
; expect Error


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; Problem A10 ;;
;;;;;;;;;;;;;;;;;

;; The subsequence of list S for which F outputs a true value (i.e., one
;; other than #f), computed destructively
(define (filter! f s)
  (define (filter!-tail result f l)
    (cond ((or (null? (cdr l)) (null? l))
	   result)
	  ((f (cadr l))
	   (filter!-tail result f (cdr l)))
	  (else
	   (set-cdr! l (cddr l))
	   (filter!-tail result f l))))
  (cond ((null? s)
	 ())
	((f (car s))
	 (filter!-tail s f s))
	(else
	 (filter! f (cdr s)))))

(define (big x) (> x 5))

(define ints (list 1 10 3 8 4 7))
(define ints1 (cdr ints))

(define filtered_ints (filter! big ints))

filtered_ints
; expect (10 8 7)

(eq? filtered_ints ints1)
; expect #t

(filter! (lambda (x) (= (modulo x 2) 0)) (list 9 1 2 3 7 6 5 2 4))
; expect (2 6 2 4)

(filter! (lambda (x) (= (modulo x 2) 1)) (list 9 1 2 3 7 6 5 2 4))
; expect (9 1 3 7 5)

(filter! (lambda (x) (= (modulo x 2) 3)) (list 9 1 2 3 7 6 5 2 4))
; expect ()

(filter! (lambda (x) (= (modulo x 2) 0)) '())
; expect ()

(define (even? n)
  (= (remainder n 2) 0))

(define (odd? n)
  (= (remainder n 2) 1))

(define stuff '(113 376 394 402 425 507 565 827 900 924 1175 1487 1504 1534
1543 1677 1678 1873 1879 2043 2462 2477 2582 2631 2968 3117 3235 3374
3415 3472 3517 3579 3662 3709 3901 4001 4053 4126 4185 4188 4223 4260
4262 4360 4501 4592 4751 4998 5086 5089 5090 5099 5100 5114 5165 5229
5231 5233 5259 5342 5435 5602 5765 6075 6075 6314 6396 6509 6832 6952
7197 7218 7286 7308 7344 7458 7460 7518 7601 7768 7933 7978 7992 8125
8136 8232 8286 8493 8793 8899 8994 9275 9395 9542 9642 9655 9700 9735
9735 9992))
(define cdrstuff (cdr stuff))
(define newstuff (filter! even? stuff))
newstuff
; expect (376 394 402 900 924 1504 1534 1678 2462 2582 2968 3374 3472 3662 4126 4188 4260 4262 4360 4592 4998 5086 5090 5100 5114 5342 5602 6314 6396 6832 6952 7218 7286 7308 7344 7458 7460 7518 7768 7978 7992 8136 8232 8286 8994 9542 9642 9700 9992)

stuff
; expect (113 376 394 402 900 924 1504 1534 1678 2462 2582 2968 3374 3472 3662 4126 4188 4260 4262 4360 4592 4998 5086 5090 5100 5114 5342 5602 6314 6396 6832 6952 7218 7286 7308 7344 7458 7460 7518 7768 7978 7992 8136 8232 8286 8994 9542 9642 9700 9992)

(eq? newstuff cdrstuff)
; expect #t

(filter! odd? '(113 376 394 402 425 507 565 827 900 924 1175 1487 1504 1534
1543 1677 1678 1873 1879 2043 2462 2477 2582 2631 2968 3117 3235 3374
3415 3472 3517 3579 3662 3709 3901 4001 4053 4126 4185 4188 4223 4260
4262 4360 4501 4592 4751 4998 5086 5089 5090 5099 5100 5114 5165 5229
5231 5233 5259 5342 5435 5602 5765 6075 6075 6314 6396 6509 6832 6952
7197 7218 7286 7308 7344 7458 7460 7518 7601 7768 7933 7978 7992 8125
8136 8232 8286 8493 8793 8899 8994 9275 9395 9542 9642 9655 9700 9735
9735 9992))
; expect (113 425 507 565 827 1175 1487 1543 1677 1873 1879 2043 2477 2631 3117 3235 3415 3517 3579 3709 3901 4001 4053 4185 4223 4501 4751 5089 5099 5165 5229 5231 5233 5259 5435 5765 6075 6075 6509 7197 7601 7933 8125 8493 8793 8899 9275 9395 9655 9735 9735)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; Problem A11 ;;
;;;;;;;;;;;;;;;;;

;; The number of ways to change TOTAL with DENOMS
;; At most MAX-COINS total coins can be used.
(define (count-change total denoms max-coins)
  (cond ((or (null? denoms) (< total 0)) 0)
	((= total 0) 1)
	((= max-coins 0) 0)
	(else (+ (count-change (- total (car denoms)) denoms (- max-coins 1))
		 (count-change total (cdr denoms) max-coins)))))

(define us_coins '(50 25 10 5 1))
(count-change 20 us_coins 18)
; expect 8

(count-change 20 '(50 25) 18)
; expect 0

(count-change 110 '(100 50 25 10 5 1) 7)
; expect 13


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; Problem B10 ;;
;;;;;;;;;;;;;;;;;

;; Reverse list L destructively, creating no new pairs.  May modify the 
;; cdrs of the items in list L.
(define (reverse! L)
  (define (reverse!-tail L previous)
    (let ((next (cdr L)))
      (set-cdr! L (cddr L))
      (set-cdr! next previous)
      (if (null? (cdr L))
	  next
	  (reverse!-tail L next))))
  (if (or (null? L) (null? (cdr L)))
      L
      (reverse!-tail L L)))

(define L (list 1 2 3 4))
(define LR (reverse! L))
LR
; expect (4 3 2 1)

(eq? L (list-tail LR 3))
; expect #t

(reverse! (list 9 1 2 3 7 6 5 2 4))
; expect (4 2 5 6 7 3 2 1 9)

(reverse! '())
; expect ()

(reverse! (list 0))
; expect (0)

(define stuff '(113 376 394 402 425 507 565 827 900 924 1175 1487 1504 1534
1543 1677 1678 1873 1879 2043 2462 2477 2582 2631 2968 3117 3235 3374
3415 3472 3517 3579 3662 3709 3901 4001 4053 4126 4185 4188 4223 4260
4262 4360 4501 4592 4751 4998 5086 5089 5090 5099 5100 5114 5165 5229
5231 5233 5259 5342 5435 5602 5765 6075 6075 6314 6396 6509 6832 6952
7197 7218 7286 7308 7344 7458 7460 7518 7601 7768 7933 7978 7992 8125
8136 8232 8286 8493 8793 8899 8994 9275 9395 9542 9642 9655 9700 9735
9735 9992))
(define newstuff (reverse! stuff))
newstuff
; expect (9992 9735 9735 9700 9655 9642 9542 9395 9275 8994 8899 8793 8493 8286 8232 8136 8125 7992 7978 7933 7768 7601 7518 7460 7458 7344 7308 7286 7218 7197 6952 6832 6509 6396 6314 6075 6075 5765 5602 5435 5342 5259 5233 5231 5229 5165 5114 5100 5099 5090 5089 5086 4998 4751 4592 4501 4360 4262 4260 4223 4188 4185 4126 4053 4001 3901 3709 3662 3579 3517 3472 3415 3374 3235 3117 2968 2631 2582 2477 2462 2043 1879 1873 1678 1677 1543 1534 1504 1487 1175 924 900 827 565 507 425 402 394 376 113)

stuff
; expect (113)

(eq? stuff (list-tail newstuff 99))
; expect #t


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;
;; Problem B11 ;;
;;;;;;;;;;;;;;;;;

;; The number of ways to partition TOTAL, where 
;; each partition must be at most MAX_VALUE
(define (count-partitions total max-value)
  (cond ((or (< total 0) (<= max-value 0))
	 0)
	((= total 0)
	 1)
	(else
	 (+ (count-partitions (- total max-value) max-value)
	    (count-partitions total (- max-value 1))))))

(count-partitions 5 3)
; expect 5
; Note: The 5 partitions are [[3 2] [3 1 1] [2 2 1] [2 1 1 1] [1 1 1 1 1]]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Problem 12 ;;
;;;;;;;;;;;;;;;;

;; A list of all ways to partition TOTAL, where each partition must 
;; be at most MAX_VALUE and there are at most MAX_PIECES partitions.
(define (list-partitions total max-pieces max-value)
  (define (list-a-partition total max-pieces max-value partition)
    (cond ((= total 0)
	   (list partition))
	  ((< total 0)
	   ())
	  ((<= max-value 0)
	   ())
	  ((<= max-pieces 0)  ;; and total != 0
	   ())
	  (else
	   (append (list-a-partition (- total max-value) (- max-pieces 1)
				     max-value (append partition
						       (list max-value)))
		   (list-a-partition total max-pieces (- max-value 1)
				     partition)))))
  (list-a-partition total max-pieces max-value ()))

(list-partitions 5 2 4)
; expect ((4 1) (3 2))
(list-partitions 7 3 5)
; expect ((5 2) (5 1 1) (4 3) (4 2 1) (3 3 1) (3 2 2))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Miscellaneous Testing ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (count-stair-ways n)
  (cond
   ((= n 0) 1)
   ((< n 0) 0)
   (else
    (+ (count-stair-ways (- n 1)) (count-stair-ways (- n 2))))))
(count-stair-ways 5)
; expect 8

(count-stair-ways 10)
; expect 89

(define (subset-sum lst k)
  (cond
   ((= k 0) #t)
   ((null? lst) #f)
   (else
    (or (subset-sum (cdr lst) (- k (car lst)))
	(subset-sum (cdr lst) k)))))
(subset-sum '(1 2 4 7 6) 4)
; expect #t

(subset-sum '(2 6 23 0 8 1 69 2 8 3 32) 42)
; expect #t

(define (merge l1 l2)
  (define (merge-tail sofar l1 l2)
    (cond
     ((null? l1) (append sofar l2))
     ((null? l2) (append sofar l1))
     ((< (car l1) (car l2))
      (merge-tail (append sofar (list (car l1))) (cdr l1) l2))
     (else
      (merge-tail (append sofar (list (car l2))) l1 (cdr l2)))))
  (merge-tail () l1 l2))

(define (list-head lst k)
  (define (list-head-tail sofar lst k)
    (cond
     ((<= k 1) (append sofar (list (car lst))))
     (else
      (list-head-tail (append sofar (list (car lst))) (cdr lst) (- k 1)))))
  (list-head-tail () lst k))

(define (merge-sort lst)
  (cond
   ((null? lst) lst)
   ((null? (cdr lst)) lst)
   (else
    (let ((len (quotient (length lst) 2)))
      (merge
       (merge-sort (list-head lst len))
       (merge-sort (list-tail lst len)))))))

(merge-sort '(15725 5 182 51 2369 0 79 76 96 -2 10 9.463 9.23 79
0.12369 15 -612 3 279 29 69 158 257 5))
; expect (-612 -2 0 0.12369 3 5 5 9.23 9.463 10 15 29 51 69 76 79 79 96 158 182 257 279 2369 15725)

(merge-sort '(5765 402 4262 425 7518 5114 7933 4998 900 7768 3579
7308 5099 1873 5435 7344 7458 8125 6075 4360 5259 1487 3117 7601 8232
9735 924 9655 4001 4260 9542 3901 7218 3709 7286 394 2582 4188 8793
3415 2043 4223 4501 7992 1504 3517 9700 5342 6509 113 6075 1678 1879
6396 8994 4592 5231 8136 7978 4126 376 5090 3662 3472 3374 2631 4185
565 8286 5165 9735 8899 1175 5086 5229 5233 9275 9395 2477 5100 827
7460 7197 6952 1534 6314 8493 1677 9992 5602 5089 2968 4751 2462 6832
507 4053 1543 9642 3235))
; expect (113 376 394 402 425 507 565 827 900 924 1175 1487 1504 1534 1543 1677 1678 1873 1879 2043 2462 2477 2582 2631 2968 3117 3235 3374 3415 3472 3517 3579 3662 3709 3901 4001 4053 4126 4185 4188 4223 4260 4262 4360 4501 4592 4751 4998 5086 5089 5090 5099 5100 5114 5165 5229 5231 5233 5259 5342 5435 5602 5765 6075 6075 6314 6396 6509 6832 6952 7197 7218 7286 7308 7344 7458 7460 7518 7601 7768 7933 7978 7992 8125 8136 8232 8286 8493 8793 8899 8994 9275 9395 9542 9642 9655 9700 9735 9735 9992)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Tail-Recursion Rigor Testing ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(merge '(1 2 3 4 5 6) '(2 6 7 9 10 11 15 15 16))
; expect (1 2 2 3 4 5 6 6 7 9 10 11 15 15 16)

(merge '(0 1 1 2 3 5 5 6 9 9 9 10 15 58 103 113 114 167 198 244 1025)
       '(2 4 8 8 9 10 26 26 28 31 37 60 61 103 262 897 3520 3566 4000))
; expect (0 1 1 2 2 3 4 5 5 6 8 8 9 9 9 9 10 10 15 26 26 28 31 37 58 60 61 103 103 113 114 167 198 244 262 897 1025 3520 3566 4000)

(merge '(113 376 394 402 425 507 565 827 900 924 1175 1487 1504 1534
1543 1677 1678 1873 1879 2043 2462 2477 2582 2631 2968 3117 3235 3374
3415 3472 3517 3579 3662 3709 3901 4001 4053 4126 4185 4188 4223 4260
4262 4360 4501 4592 4751 4998 5086 5089 5090 5099 5100 5114 5165 5229
5231 5233 5259 5342 5435 5602 5765 6075 6075 6314 6396 6509 6832 6952
7197 7218 7286 7308 7344 7458 7460 7518 7601 7768 7933 7978 7992 8125
8136 8232 8286 8493 8793 8899 8994 9275 9395 9542 9642 9655 9700 9735
9735 9992) '(-612 -2 0 0.12369 3 5 5 9.23 9.463 10 15 29 51 69 76 79
79 96 158 182 257 279 2369 15725))
; expect (-612 -2 0 0.12369 3 5 5 9.23 9.463 10 15 29 51 69 76 79 79 96 113 158 182 257 279 376 394 402 425 507 565 827 900 924 1175 1487 1504 1534 1543 1677 1678 1873 1879 2043 2369 2462 2477 2582 2631 2968 3117 3235 3374 3415 3472 3517 3579 3662 3709 3901 4001 4053 4126 4185 4188 4223 4260 4262 4360 4501 4592 4751 4998 5086 5089 5090 5099 5100 5114 5165 5229 5231 5233 5259 5342 5435 5602 5765 6075 6075 6314 6396 6509 6832 6952 7197 7218 7286 7308 7344 7458 7460 7518 7601 7768 7933 7978 7992 8125 8136 8232 8286 8493 8793 8899 8994 9275 9395 9542 9642 9655 9700 9735 9735 9992 15725)

(define (filter pred lst)
  (define (filter-tail sofar pred lst)
    (cond ((null? lst)
	   sofar)
	  ((pred (car lst))
	   (filter-tail (append sofar (list (car lst))) pred (cdr lst)))
	  (else
	   (filter-tail sofar pred (cdr lst)))))
  (filter-tail () pred lst))

(filter even? '(113 376 394 402 425 507 565 827 900 924 1175 1487 1504 1534
1543 1677 1678 1873 1879 2043 2462 2477 2582 2631 2968 3117 3235 3374
3415 3472 3517 3579 3662 3709 3901 4001 4053 4126 4185 4188 4223 4260
4262 4360 4501 4592 4751 4998 5086 5089 5090 5099 5100 5114 5165 5229
5231 5233 5259 5342 5435 5602 5765 6075 6075 6314 6396 6509 6832 6952
7197 7218 7286 7308 7344 7458 7460 7518 7601 7768 7933 7978 7992 8125
8136 8232 8286 8493 8793 8899 8994 9275 9395 9542 9642 9655 9700 9735
9735 9992))
; expect (376 394 402 900 924 1504 1534 1678 2462 2582 2968 3374 3472 3662 4126 4188 4260 4262 4360 4592 4998 5086 5090 5100 5114 5342 5602 6314 6396 6832 6952 7218 7286 7308 7344 7458 7460 7518 7768 7978 7992 8136 8232 8286 8994 9542 9642 9700 9992)

(filter odd? '(113 376 394 402 425 507 565 827 900 924 1175 1487 1504 1534
1543 1677 1678 1873 1879 2043 2462 2477 2582 2631 2968 3117 3235 3374
3415 3472 3517 3579 3662 3709 3901 4001 4053 4126 4185 4188 4223 4260
4262 4360 4501 4592 4751 4998 5086 5089 5090 5099 5100 5114 5165 5229
5231 5233 5259 5342 5435 5602 5765 6075 6075 6314 6396 6509 6832 6952
7197 7218 7286 7308 7344 7458 7460 7518 7601 7768 7933 7978 7992 8125
8136 8232 8286 8493 8793 8899 8994 9275 9395 9542 9642 9655 9700 9735
9735 9992))
; expect (113 425 507 565 827 1175 1487 1543 1677 1873 1879 2043 2477 2631 3117 3235 3415 3517 3579 3709 3901 4001 4053 4185 4223 4501 4751 5089 5099 5165 5229 5231 5233 5259 5435 5765 6075 6075 6509 7197 7601 7933 8125 8493 8793 8899 9275 9395 9655 9735 9735)

(define (map1 f L)
  ;; Testing tail recursion of if form
  (define (map1-tail sofar L)
    (if (null? L) sofar
	(map1-tail (cons (f (car L)) sofar) (cdr L))))
  (reverse (map1-tail '() L)))

(map1 (lambda (x) (* x 2)) '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106
107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123
124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157
158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174
175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208
209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225
226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242
243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259
260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276
277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293
294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310
311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327
328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344
345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361
362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378
379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412
413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429
430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446
447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463
464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480
481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497
498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514
515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531
532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548
549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565
566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582
583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599
600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616
617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633
634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650
651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667
668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684
685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701
702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718
719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735
736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752
753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769
770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786
787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803
804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820
821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837
838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854
855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871
872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888
889 890 891 892 893 894 895 896 897 898 899 900))
; expect (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 378 380 382 384 386 388 390 392 394 396 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432 434 436 438 440 442 444 446 448 450 452 454 456 458 460 462 464 466 468 470 472 474 476 478 480 482 484 486 488 490 492 494 496 498 500 502 504 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 564 566 568 570 572 574 576 578 580 582 584 586 588 590 592 594 596 598 600 602 604 606 608 610 612 614 616 618 620 622 624 626 628 630 632 634 636 638 640 642 644 646 648 650 652 654 656 658 660 662 664 666 668 670 672 674 676 678 680 682 684 686 688 690 692 694 696 698 700 702 704 706 708 710 712 714 716 718 720 722 724 726 728 730 732 734 736 738 740 742 744 746 748 750 752 754 756 758 760 762 764 766 768 770 772 774 776 778 780 782 784 786 788 790 792 794 796 798 800 802 804 806 808 810 812 814 816 818 820 822 824 826 828 830 832 834 836 838 840 842 844 846 848 850 852 854 856 858 860 862 864 866 868 870 872 874 876 878 880 882 884 886 888 890 892 894 896 898 900 902 904 906 908 910 912 914 916 918 920 922 924 926 928 930 932 934 936 938 940 942 944 946 948 950 952 954 956 958 960 962 964 966 968 970 972 974 976 978 980 982 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1008 1010 1012 1014 1016 1018 1020 1022 1024 1026 1028 1030 1032 1034 1036 1038 1040 1042 1044 1046 1048 1050 1052 1054 1056 1058 1060 1062 1064 1066 1068 1070 1072 1074 1076 1078 1080 1082 1084 1086 1088 1090 1092 1094 1096 1098 1100 1102 1104 1106 1108 1110 1112 1114 1116 1118 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1154 1156 1158 1160 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1216 1218 1220 1222 1224 1226 1228 1230 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 1316 1318 1320 1322 1324 1326 1328 1330 1332 1334 1336 1338 1340 1342 1344 1346 1348 1350 1352 1354 1356 1358 1360 1362 1364 1366 1368 1370 1372 1374 1376 1378 1380 1382 1384 1386 1388 1390 1392 1394 1396 1398 1400 1402 1404 1406 1408 1410 1412 1414 1416 1418 1420 1422 1424 1426 1428 1430 1432 1434 1436 1438 1440 1442 1444 1446 1448 1450 1452 1454 1456 1458 1460 1462 1464 1466 1468 1470 1472 1474 1476 1478 1480 1482 1484 1486 1488 1490 1492 1494 1496 1498 1500 1502 1504 1506 1508 1510 1512 1514 1516 1518 1520 1522 1524 1526 1528 1530 1532 1534 1536 1538 1540 1542 1544 1546 1548 1550 1552 1554 1556 1558 1560 1562 1564 1566 1568 1570 1572 1574 1576 1578 1580 1582 1584 1586 1588 1590 1592 1594 1596 1598 1600 1602 1604 1606 1608 1610 1612 1614 1616 1618 1620 1622 1624 1626 1628 1630 1632 1634 1636 1638 1640 1642 1644 1646 1648 1650 1652 1654 1656 1658 1660 1662 1664 1666 1668 1670 1672 1674 1676 1678 1680 1682 1684 1686 1688 1690 1692 1694 1696 1698 1700 1702 1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800)

(define (map2 f L)
  ;; Testing tail recursion of cond form
  (define (map2-tail sofar L)
    (cond ((null? L) sofar)
	(else (map2-tail (cons (f (car L)) sofar) (cdr L)))))
  (reverse (map2-tail '() L)))

(map2 (lambda (x) (* x 2)) '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106
107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123
124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157
158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174
175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208
209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225
226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242
243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259
260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276
277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293
294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310
311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327
328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344
345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361
362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378
379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412
413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429
430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446
447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463
464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480
481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497
498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514
515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531
532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548
549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565
566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582
583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599
600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616
617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633
634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650
651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667
668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684
685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701
702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718
719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735
736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752
753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769
770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786
787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803
804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820
821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837
838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854
855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871
872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888
889 890 891 892 893 894 895 896 897 898 899 900))
; expect (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 378 380 382 384 386 388 390 392 394 396 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432 434 436 438 440 442 444 446 448 450 452 454 456 458 460 462 464 466 468 470 472 474 476 478 480 482 484 486 488 490 492 494 496 498 500 502 504 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 564 566 568 570 572 574 576 578 580 582 584 586 588 590 592 594 596 598 600 602 604 606 608 610 612 614 616 618 620 622 624 626 628 630 632 634 636 638 640 642 644 646 648 650 652 654 656 658 660 662 664 666 668 670 672 674 676 678 680 682 684 686 688 690 692 694 696 698 700 702 704 706 708 710 712 714 716 718 720 722 724 726 728 730 732 734 736 738 740 742 744 746 748 750 752 754 756 758 760 762 764 766 768 770 772 774 776 778 780 782 784 786 788 790 792 794 796 798 800 802 804 806 808 810 812 814 816 818 820 822 824 826 828 830 832 834 836 838 840 842 844 846 848 850 852 854 856 858 860 862 864 866 868 870 872 874 876 878 880 882 884 886 888 890 892 894 896 898 900 902 904 906 908 910 912 914 916 918 920 922 924 926 928 930 932 934 936 938 940 942 944 946 948 950 952 954 956 958 960 962 964 966 968 970 972 974 976 978 980 982 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1008 1010 1012 1014 1016 1018 1020 1022 1024 1026 1028 1030 1032 1034 1036 1038 1040 1042 1044 1046 1048 1050 1052 1054 1056 1058 1060 1062 1064 1066 1068 1070 1072 1074 1076 1078 1080 1082 1084 1086 1088 1090 1092 1094 1096 1098 1100 1102 1104 1106 1108 1110 1112 1114 1116 1118 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1154 1156 1158 1160 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1216 1218 1220 1222 1224 1226 1228 1230 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 1316 1318 1320 1322 1324 1326 1328 1330 1332 1334 1336 1338 1340 1342 1344 1346 1348 1350 1352 1354 1356 1358 1360 1362 1364 1366 1368 1370 1372 1374 1376 1378 1380 1382 1384 1386 1388 1390 1392 1394 1396 1398 1400 1402 1404 1406 1408 1410 1412 1414 1416 1418 1420 1422 1424 1426 1428 1430 1432 1434 1436 1438 1440 1442 1444 1446 1448 1450 1452 1454 1456 1458 1460 1462 1464 1466 1468 1470 1472 1474 1476 1478 1480 1482 1484 1486 1488 1490 1492 1494 1496 1498 1500 1502 1504 1506 1508 1510 1512 1514 1516 1518 1520 1522 1524 1526 1528 1530 1532 1534 1536 1538 1540 1542 1544 1546 1548 1550 1552 1554 1556 1558 1560 1562 1564 1566 1568 1570 1572 1574 1576 1578 1580 1582 1584 1586 1588 1590 1592 1594 1596 1598 1600 1602 1604 1606 1608 1610 1612 1614 1616 1618 1620 1622 1624 1626 1628 1630 1632 1634 1636 1638 1640 1642 1644 1646 1648 1650 1652 1654 1656 1658 1660 1662 1664 1666 1668 1670 1672 1674 1676 1678 1680 1682 1684 1686 1688 1690 1692 1694 1696 1698 1700 1702 1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800)

(define (map3 f L)
  ;; Testing tail recursion of case form
  (define (map3-tail sofar L)
    (case (null? L)
      (#t sofar)
      (#f (map3-tail (cons (f (car L)) sofar) (cdr L)))))
  (reverse (map3-tail '() L)))

(map3 (lambda (x) (* x 2)) '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106
107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123
124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157
158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174
175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208
209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225
226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242
243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259
260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276
277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293
294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310
311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327
328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344
345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361
362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378
379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412
413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429
430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446
447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463
464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480
481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497
498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514
515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531
532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548
549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565
566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582
583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599
600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616
617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633
634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650
651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667
668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684
685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701
702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718
719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735
736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752
753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769
770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786
787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803
804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820
821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837
838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854
855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871
872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888
889 890 891 892 893 894 895 896 897 898 899 900))
; expect (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 378 380 382 384 386 388 390 392 394 396 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432 434 436 438 440 442 444 446 448 450 452 454 456 458 460 462 464 466 468 470 472 474 476 478 480 482 484 486 488 490 492 494 496 498 500 502 504 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 564 566 568 570 572 574 576 578 580 582 584 586 588 590 592 594 596 598 600 602 604 606 608 610 612 614 616 618 620 622 624 626 628 630 632 634 636 638 640 642 644 646 648 650 652 654 656 658 660 662 664 666 668 670 672 674 676 678 680 682 684 686 688 690 692 694 696 698 700 702 704 706 708 710 712 714 716 718 720 722 724 726 728 730 732 734 736 738 740 742 744 746 748 750 752 754 756 758 760 762 764 766 768 770 772 774 776 778 780 782 784 786 788 790 792 794 796 798 800 802 804 806 808 810 812 814 816 818 820 822 824 826 828 830 832 834 836 838 840 842 844 846 848 850 852 854 856 858 860 862 864 866 868 870 872 874 876 878 880 882 884 886 888 890 892 894 896 898 900 902 904 906 908 910 912 914 916 918 920 922 924 926 928 930 932 934 936 938 940 942 944 946 948 950 952 954 956 958 960 962 964 966 968 970 972 974 976 978 980 982 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1008 1010 1012 1014 1016 1018 1020 1022 1024 1026 1028 1030 1032 1034 1036 1038 1040 1042 1044 1046 1048 1050 1052 1054 1056 1058 1060 1062 1064 1066 1068 1070 1072 1074 1076 1078 1080 1082 1084 1086 1088 1090 1092 1094 1096 1098 1100 1102 1104 1106 1108 1110 1112 1114 1116 1118 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1154 1156 1158 1160 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1216 1218 1220 1222 1224 1226 1228 1230 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 1316 1318 1320 1322 1324 1326 1328 1330 1332 1334 1336 1338 1340 1342 1344 1346 1348 1350 1352 1354 1356 1358 1360 1362 1364 1366 1368 1370 1372 1374 1376 1378 1380 1382 1384 1386 1388 1390 1392 1394 1396 1398 1400 1402 1404 1406 1408 1410 1412 1414 1416 1418 1420 1422 1424 1426 1428 1430 1432 1434 1436 1438 1440 1442 1444 1446 1448 1450 1452 1454 1456 1458 1460 1462 1464 1466 1468 1470 1472 1474 1476 1478 1480 1482 1484 1486 1488 1490 1492 1494 1496 1498 1500 1502 1504 1506 1508 1510 1512 1514 1516 1518 1520 1522 1524 1526 1528 1530 1532 1534 1536 1538 1540 1542 1544 1546 1548 1550 1552 1554 1556 1558 1560 1562 1564 1566 1568 1570 1572 1574 1576 1578 1580 1582 1584 1586 1588 1590 1592 1594 1596 1598 1600 1602 1604 1606 1608 1610 1612 1614 1616 1618 1620 1622 1624 1626 1628 1630 1632 1634 1636 1638 1640 1642 1644 1646 1648 1650 1652 1654 1656 1658 1660 1662 1664 1666 1668 1670 1672 1674 1676 1678 1680 1682 1684 1686 1688 1690 1692 1694 1696 1698 1700 1702 1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800)

(define (multiple-apply fn arg n)
  (if (<= n 0)
      arg
      (multiple-apply fn (fn arg) (- n 1))))

(multiple-apply (lambda (x) (+ x 2)) 1 2500)
; expect 5001

(multiple-apply (lambda (x) (- x 3)) 5 23250)
; expect -69745


;; -- END TEST -- ;;
